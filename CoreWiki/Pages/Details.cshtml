@page "{Slug?}"
@model DetailsModel
@{
	var title = "Details";
	if (!string.IsNullOrEmpty(Model.Article.Topic))
	{
		title = Model.Article.Topic;
	}
	ViewData["Title"] = title;
}

@functions  {

	public int CalculateReadTime(string content)
	{
		const decimal wpm = 275.0m;
		var wordCount = content.Split(' ').Length;
		return (int)Math.Ceiling(wordCount / wpm);
	}

}

<h2>@Model.Article.Topic</h2>
<h5>Last Published: <span data-value="@Model.Article.Published" class="timeStampValue"> @Model.Article.Published</span></h5>
<h5>View Count: <span data-value="@Model.Article.ViewCount"> @Model.Article.ViewCount</span></h5>
<h5>Estimated Reading Time (minutes): <span> @CalculateReadTime(Model.Article.Content)</span></h5>
<markdown markdown="Article.Content" />

<div>
	<a asp-page="./Edit" asp-route-id="@Model.Article.Id">Edit</a>

	@if (Model.Article.Slug != "home-page")
	{
		<text>| </text><a href="~/">Back to Home</a>
	}
</div>

@await Component.InvokeAsync("CreateComments", new Models.Comment { IdArticle = Model.Article.Id })
@await Component.InvokeAsync("ListComments", @Model.Article.Comments)

@section Scripts {
	@await Html.PartialAsync("_EditorScript")
}

@section Styles {
	@await Html.PartialAsync("_EditorStyle")
	<style>
		.labelDisplayName {
			font-weight: bold;
			text-transform: capitalize;
			color: #007bb8 !important;
		}

		.labelCommentedOn {
			color: #A6A6A6;
			font-size: 10px;
			height: 10px;
		}
	</style>
}
